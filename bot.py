#!/usr/bin/python3
# -*- coding: utf-8 -*-
import json
import re
import logging
import requests
from telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove,
                      InlineKeyboardButton, InlineKeyboardMarkup)
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters,
                          ConversationHandler, CallbackQueryHandler)

SERVICE_DOMAIN = '3wifi.stascorp.com'
SERVICE_URL = 'https://' + SERVICE_DOMAIN
USER_KEYS_DB_FILENAME = 'userkeys.json'

# Initializing settings
try:
    with open('config.json', 'r', encoding='utf-8') as file:
        config = json.load(file)
        TOKEN = config['bot_token']
        IP = config['webhook_ip']
        API_KEY = config['3wifi_apikey']
except FileNotFoundError:
    print('Please provide the following credentials')
    TOKEN = input('Telegram bot API token: ')
    IP = input('IP for webhook: ')
    API_KEY = input('3WiFi API read key: ')
    config = {
        'bot_token': TOKEN,
        'webhook_ip': IP,
        '3wifi_apikey': API_KEY
    }
    with open('config.json', 'w', encoding='utf-8') as outf:
        json.dump(config, outf, indent=4)

# Initializing user API keys database
try:
    with open(USER_KEYS_DB_FILENAME, 'r', encoding='utf-8') as file:
        USER_KEYS = json.load(file)
except FileNotFoundError:
    USER_KEYS = dict()
    with open(USER_KEYS_DB_FILENAME, 'w', encoding='utf-8') as outf:
        json.dump(USER_KEYS, outf, indent=4)

# Single BSSID pattern
bssid_pattern = re.compile(r"^(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})$")
# BSSID multi-line list pattern. Maximum 100 BSSID
bssid_list_pattern = re.compile(r"(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})(?:[\n](?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})){0,99}")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)


class ConversationStates():
    LOGIN_PROMPT = 1
    PASSWORD_PROMPT = 2
    BSSID_PROMPT = 3
    ESSID_PROMPT = 4


def scoreformat(score):
    answer = ''
    score *= 100
    if score < 1:
        answer = "{0:.2f}".format(score)
    elif score < 10:
        answer = "{0:.1f}".format(score)
    else:
        answer = str(round(score))
    answer += '%'
    return answer


def getPersonalAPIkey(user_id):
    """Gets 3WiFi API key by Telegram user ID"""
    user_id = str(user_id)
    if user_id in USER_KEYS:
        return USER_KEYS[user_id]
    else:
        return API_KEY


def formatap(data):
    key_labels = {
        'essid': 'ESSID',
        'bssid': 'BSSID',
        'key': 'Password',
        'wps': 'WPS PIN',
        'time': 'Date'
    }
    order = ['essid', 'bssid', 'key', 'wps', 'time']    # Order of values in the answer
    copyable = ['essid', 'bssid', 'key', 'wps']   # Values that can be copied (monospaced font)
    answer = ''
    for element in order:
        if (element in data) and data[element]:   # Check if value is not empty
            key, value = element, data[element]
            if (key in copyable) and (value != '<empty>'):
                answer += f'{key_labels[key]}: `{value}`\n'
            else:
                answer += f'{key_labels[key]}: {value}\n'
    if 'lat' in data:
        answer += f"[–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ]({SERVICE_URL}/map?lat={data['lat']}&lon={data['lon']})\n"
    else:
        answer += '- - - - -\n'
    return answer


def formatpin(data):
    key_labels = {
        'name': 'Name',
        'value': 'Pin',
        'score': 'Score'
    }
    order = ['name', 'value', 'score']    # Order of values in the answer
    copyable = ['value']   # Values that can be copied (monospaced font)
    answer = ''
    for element in order:
        if (element in data) and data[element]:   # Check if value is not empty
            key, value = element, data[element]
            if key == 'score':
                value = scoreformat(value)
            if key in copyable:
                answer += f'{key_labels[key]}: `{value}`\n'
            else:
                answer += f'{key_labels[key]}: {value}\n'
    answer += '- - - - -\n'
    return answer


def formataps(values):
    answer = ''
    for value in values:
        answer += formatap(value)
    return answer


def formatpins(values):
    answer = ''
    for value in values:
        answer += formatpin(value)
    return answer


def getApiErrorDesc(error, user_id):
    if error == 'cooldown':
        return '–£–∑–±–∞–≥–æ–π—Å—è –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫ üòú'
    elif error == 'loginfail':
        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ 3WiFi. –ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ /login, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /logout'
    elif error == 'lowlevel':
        if str(user_id) in USER_KEYS:
            return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç 3WiFi –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
        else:
            return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –í–µ—Ä–æ—è—Ç–Ω–æ, –≥–æ—Å—Ç–µ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ö—É–ø–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ç—É—Ç: https://t.me/routerscan/15931'
    else:
        return '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÆ error: ' + error


def apiquery(user_id, bssid='*', essid=None, sensivity=False):
    """Implements querying single AP by its BSSID/ESSID"""
    api_key = getPersonalAPIkey(user_id)
    url = f'{SERVICE_URL}/api/apiquery?key={api_key}&bssid={bssid}'
    if essid is not None:
        url += f'&essid={essid}'
    if sensivity:
        url += '&sens=true'
    response = requests.get(url).json()

    reply_markup = None
    if not response['result']:
        return getApiErrorDesc(response['error'], user_id), reply_markup
    if len(response['data']) == 0:
        if bssid != '*':
            keyboard = [[InlineKeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏–Ω-–∫–æ–¥—ã WPS', callback_data=f'{user_id}/{bssid}')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        return '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ :(', reply_markup
    return formataps(tuple(response['data'].values())[0]), reply_markup


def apiwps(user_id, bssid):
    """Implements generating PIN codes for single AP by its BSSID"""
    api_key = getPersonalAPIkey(user_id)
    response = requests.get(f'{SERVICE_URL}/api/apiwps?key={api_key}&bssid={bssid}').json()
    if not response['result']:
        return getApiErrorDesc(response['error'], user_id)
    if len(response['data']) == 0:
        return '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ :('
    return formatpins(response['data'][bssid.upper()]['scores'])


def parseApDataArgs(args):
    """Parsing BSSID and ESSID from /pw command arguments"""
    if re.match(bssid_pattern, args[0]) is not None:
        bssid = args[0]
        if len(args) > 1:
            essid = ' '.join(args[1:])
        else:
            essid = None
    else:
        bssid = '*'
        essid = ' '.join(args)
    return bssid, essid


def unknown(update, context):
    """Handler for unknown commands"""
    update.message.reply_text('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º')


def help(update, context):
    """Hadler for /help command"""
    answer = '''{} –±–æ—Ç!
/pw BSSID –∏/–∏–ª–∏ ESSID ‚Äî –ø–æ–∏—Å–∫ –ø–æ MAC-–∞–¥—Ä–µ—Å—É –∏–ª–∏ –∏–º–µ–Ω–∏ —Ç–æ—á–∫–∏ (–ø—Ä–∏–º–µ—Ä: /pw FF:FF:FF:FF:FF:FF –∏–ª–∏ /pw netgear –∏–ª–∏ /pw FF:FF:FF:FF:FF:FF VILTEL)
/pws ‚Äî —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ /pw, –Ω–æ —Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ (ESSID)
/wps BSSID ‚Äî –ø–æ–∏—Å–∫ WPS –ø–∏–Ω-–∫–æ–¥–æ–≤ –ø–æ MAC-–∞–¥—Ä–µ—Å—É (–ø—Ä–∏–º–µ—Ä: /wps FF:FF:FF:FF:FF:FF)'''.format(SERVICE_DOMAIN)
    private_commands = '''\n/login username:password ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –ª–∏—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º 3WiFi –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
/logout ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 3WiFi'''
    if update.message.chat.type == 'private':
        answer += private_commands
    update.message.reply_text(answer)


def authorize(login, password, context, user_id):
    """3WiFi authorization interface"""
    r = requests.post(f'{SERVICE_URL}/api/apikeys', data={'login': login, 'password': password}).json()
    if r['result']:
        if r['profile']['level'] > 0:
            user_id = str(user_id)
            nickname = r['profile']['nick']
            try:
                apikey = list(filter(lambda x: x['access'] == 'read', r['data']))[0]['key']
            except IndexError:
                answer = '–û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç *{}* –Ω–µ –∏–º–µ–µ—Ç API-–∫–ª—é—á–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.'.format(nickname)
            else:
                USER_KEYS[user_id] = apikey
                with open(USER_KEYS_DB_FILENAME, 'w', encoding='utf-8') as outf:
                    json.dump(USER_KEYS, outf, indent=4)
                answer = '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ *{}*. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /logout'.format(nickname)
                # Send security notification to users with the same token
                for telegram_id, api_key in USER_KEYS.items():
                    if (apikey == api_key) and (telegram_id != user_id) and (api_key != API_KEY):
                        context.bot.send_message(
                            chat_id=telegram_id,
                            text='*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏*\n[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={}) —Ç–æ–ª—å–∫–æ —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º 3WiFi.'.format(user_id),
                            parse_mode='Markdown'
                            )
        else:
            answer = '–û—à–∏–±–∫–∞: —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è *–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*'
    elif r['error'] == 'loginfail':
        answer = '–û—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å'
    elif r['error'] == 'lowlevel':
        answer = '–û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    else:
        answer = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÆ error: {}'.format(r['error'])
    return answer


def login(update, context):
    """Handler for /login command"""
    if update.message.chat.type != 'private':
        update.message.reply_text('–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–õ–°)')
        return ConversationHandler.END
    answer = '–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω:'
    if context.args:
        args = ' '.join(context.args)
        if ':' in args:
            login, password = args.split(':')[:2]
            answer = authorize(login, password, context, update.message.from_user.id)
            update.message.reply_text(answer, parse_mode='Markdown')
            return ConversationHandler.END
    update.message.reply_text(answer)
    return ConversationStates.LOGIN_PROMPT


def login_prompt(update, context):
    context.user_data['login'] = update.message.text
    update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    return ConversationStates.PASSWORD_PROMPT


def password_prompt(update, context):
    password = update.message.text
    login = context.user_data['login']
    answer = authorize(login, password, context, update.message.from_user.id)
    update.message.reply_text(answer, parse_mode='Markdown')
    return ConversationHandler.END


def cancel_conversation(update, context):
    '''Generic conversation canceler'''
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def logout(update, context):
    """Handler for /logout command"""
    if update.message.chat.type != 'private':
        update.message.reply_text('–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–õ–°)')
        return
    user_id = str(update.message.from_user.id)
    try:
        USER_KEYS.pop(user_id)
        with open(USER_KEYS_DB_FILENAME, 'w', encoding='utf-8') as outf:
            json.dump(USER_KEYS, outf, indent=4)
    except KeyError:
        answer = '–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ 3WiFi, —Ç.–∫. –≤—ã –Ω–µ –≤–æ—à–ª–∏'
    else:
        answer = '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, API-–∫–ª—é—á –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 3WiFi —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞. –ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /login'
    update.message.reply_text(answer)


def pw(update, context):
    """Handler for /pw command"""
    answer = '–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω BSSID –∏–ª–∏ ESSID.\n–ü–æ–∏—Å–∫ –ø–æ BSSID –∏/–∏–ª–∏ ESSID –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–∞–∫: /pw BSSID/ESSID (–ø—Ä–∏–º–µ—Ä: /pw FF:FF:FF:FF:FF:FF VILTEL –∏–ª–∏ /pw FF:FF:FF:FF:FF:FF –∏–ª–∏ /pw netgear)'
    user_id = update.message.from_user.id
    args = context.args
    reply_markup = None
    if len(args) > 0:
        bssid, essid = parseApDataArgs(args)
        answer, reply_markup = apiquery(user_id, bssid, essid)
    elif update.message.chat.type == 'private':
        reply_keyboard = [['‚Ü™ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
        update.message.reply_text(
            '–£–∫–∞–∂–∏—Ç–µ BSSID:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             one_time_keyboard=True,
                                             resize_keyboard=True)
        )
        context.user_data['sensivity'] = False
        return ConversationStates.BSSID_PROMPT
    update.message.reply_text(answer, parse_mode='Markdown', reply_markup=reply_markup)
    return ConversationHandler.END


def bssid_prompt(update, context):
    t = update.message.text
    if re.match(bssid_pattern, t) is not None:
        reply_keyboard = [['‚Ü™ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
        context.user_data['bssid'] = t
        update.message.reply_text(
            '–£–∫–∞–∂–∏—Ç–µ ESSID:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             one_time_keyboard=True,
                                             resize_keyboard=True)
        )
        return ConversationStates.ESSID_PROMPT
    elif re.match(r'‚Ü™ ', t) is not None:
        # Skip the BSSID prompt
        context.user_data['bssid'] = '*'
        update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ ESSID:', reply_markup=ReplyKeyboardRemove())
        return ConversationStates.ESSID_PROMPT
    else:
        update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BSSID. –£–∫–∞–∂–∏—Ç–µ BSSID:')
        return ConversationStates.BSSID_PROMPT


def essid_prompt(update, context):
    t = update.message.text
    if re.match(r'‚Ü™ ', t) is not None:
        # Skip the ESSID prompt
        essid = None
    else:
        essid = t
    bssid = context.user_data['bssid']
    sensivity = context.user_data['sensivity']
    answer, reply_markup = apiquery(update.message.from_user.id, bssid, essid, sensivity)
    update.message.reply_text(answer, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def pws(update, context):
    """Handler for /pws command"""
    answer = '–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω BSSID –∏–ª–∏ ESSID.\n–ü–æ–∏—Å–∫ –ø–æ BSSID –∏/–∏–ª–∏ ESSID –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–∞–∫: /pws BSSID/ESSID (–ø—Ä–∏–º–µ—Ä: /pws FF:FF:FF:FF:FF:FF VILTEL –∏–ª–∏ /pws FF:FF:FF:FF:FF:FF –∏–ª–∏ /pws netgear)'
    user_id = update.message.from_user.id
    args = context.args
    if len(args) > 0:
        bssid, essid = parseApDataArgs(args)
        answer, reply_markup = apiquery(user_id, bssid, essid, sensivity=True)
    elif update.message.chat.type == 'private':
        update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ BSSID:')
        context.user_data['sensivity'] = True
        return ConversationStates.BSSID_PROMPT
    update.message.reply_text(answer, parse_mode='Markdown', reply_markup=reply_markup)
    return ConversationHandler.END


def wps(update, context):
    """Handler for /wps command"""
    answer = '–ü–æ–∏—Å–∫ WPS –ø–∏–Ω-–∫–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–∞–∫: /wps BSSID (–ø—Ä–∏–º–µ—Ä: /wps FF:FF:FF:FF:FF:FF)'
    user_id = update.message.from_user.id
    args = context.args
    if (len(args) == 1) and (re.match(bssid_pattern, args[0]) is not None):
        answer = apiwps(user_id, args[0])
    if len(answer) > 3900:
        update.message.reply_text(answer[:3900] + '\n–°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ {}/wpspin'.format(SERVICE_URL), parse_mode='Markdown')
    else:
        update.message.reply_text(answer, parse_mode='Markdown')


def querybssidlist(update, context):
    """Handler for message containing BSSID"""
    user_id = update.message.from_user.id
    bssid_list = update.message.text.splitlines()
    # Filtering BSSID list with preversing order
    seen = set()
    bssid_list = [x for x in bssid_list if not (x in seen or seen.add(x))]
    del seen

    reply_markup = None
    if len(bssid_list) == 1:
        # Fetch 10 records for single BSSID
        answer, reply_markup = apiquery(user_id, bssid=bssid_list[0])
    else:
        # Fetch one record per BSSID
        response = requests.post(
            f'{SERVICE_URL}/api/apiquery',
            json={
                'key': getPersonalAPIkey(user_id),
                'bssid': bssid_list
            }
        ).json()
        if not response['result']:
            answer = getApiErrorDesc(response['error'], user_id)
        elif len(response['data']) == 0:
            answer = '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ :('
        else:
            data = response['data']
            print(data)
            answer = ''
            for bssid in bssid_list:
                if bssid in data:
                    answer += formatap(data[bssid][0])
    update.message.reply_text(answer, parse_mode='Markdown', reply_markup=reply_markup)


def callbackbutton(update, context):
    """Handler for WPS PIN inline button"""
    query = update.callback_query
    initiator_id, bssid = query.data.split('/')
    user_id = str(query.from_user.id)
    if initiator_id != user_id:
        query.answer(text='–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞')
    else:
        query.answer()
        old_text = query.message.text
        query.edit_message_text(
            text=f'{old_text}\n\n*–ü–∏–Ω-–∫–æ–¥—ã WPS:*\n_–û–∂–∏–¥–∞–π—Ç–µ‚Ä¶_', parse_mode='Markdown'
        )
        answer = apiwps(initiator_id, bssid)
        text = f'{old_text}\n\n*–ü–∏–Ω-–∫–æ–¥—ã WPS:*\n{answer}'
        query.edit_message_text(text=text, parse_mode='Markdown')


def error(update, context):
    logger.warning('Update "%s" caused error "%s"', update, context.error)


updater = Updater(TOKEN, use_context=True)
dp = updater.dispatcher

auth_conversation = ConversationHandler(
    entry_points=[CommandHandler("login", login, pass_args=True)],
    states={
        ConversationStates.LOGIN_PROMPT: [MessageHandler(Filters.text & ~Filters.command, login_prompt)],
        ConversationStates.PASSWORD_PROMPT: [MessageHandler(Filters.text & ~Filters.command, password_prompt)]
    },
    fallbacks=[CommandHandler("cancel", cancel_conversation)]
)
ap_query_conversation = ConversationHandler(
    entry_points=[CommandHandler("pw", pw, pass_args=True), CommandHandler("pws", pws, pass_args=True)],
    states={
        ConversationStates.BSSID_PROMPT: [MessageHandler(Filters.text & ~Filters.command, bssid_prompt)],
        ConversationStates.ESSID_PROMPT: [MessageHandler(Filters.text & ~Filters.command, essid_prompt)]
    },
    fallbacks=[CommandHandler("cancel", cancel_conversation)],
    conversation_timeout=600   # 10 minutes
)
dp.add_handler(auth_conversation)
dp.add_handler(ap_query_conversation)
dp.add_handler(CommandHandler("help", help))
dp.add_handler(CommandHandler("start", help))
dp.add_handler(CommandHandler("logout", logout))
dp.add_handler(CommandHandler("wps", wps, pass_args=True))
dp.add_handler(MessageHandler(Filters.regex(bssid_list_pattern) & Filters.private, querybssidlist))
dp.add_handler(MessageHandler((Filters.text | Filters.command) & Filters.private, unknown))
dp.add_handler(CallbackQueryHandler(callbackbutton))
dp.add_error_handler(error)

if IP == 'no':
    updater.start_polling(poll_interval=.5)
else:
    updater.start_webhook(listen='0.0.0.0', port=8443, url_path=TOKEN, key='private.key', cert='cert.pem', webhook_url=f'https://{IP}:8443/{TOKEN}')
